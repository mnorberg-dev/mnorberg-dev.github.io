[{"content":"Mosaic AI Gateway is Databricks’ system for managing and governing how your organization uses large language models (LLMs) and AI agents. Out of the box, it includes features like permission and rate limiting, payload logging, usage tracking, AI guardrails, fallbacks, and traffic splitting. These tools give teams tighter control over their AI workloads — making it easier to manage access, monitor performance, and keep costs in check.\nAlthough Mosaic AI Gateway comes with many powerful features, one capability is still missing: MLflow Tracing. Tracing is like logging with context — it doesn’t just capture the request and response, but also the intermediate steps that reveal what happened inside your AI system when something goes wrong. Without it, visibility into model behavior can be limited. As you’ll see, MLflow traces can be an invaluable tool when debugging or optimizing an LLM workflow.\nSo the question becomes: how do you build a Mosaic AI Gateway endpoint that captures traces for each request?\nThe Goal of This Guide My goal is to show you how to build a Mosaic AI endpoint with tracing enabled by default — and to make that process clear enough that you can adapt it to your own setup. Over the past month, I’ve spent a lot of time configuring endpoints, debugging integrations, and figuring out how all the pieces fit together. After plenty of trial and error, I wanted to share what I’ve learned so other developers can get up and running faster.\nIf you’ve explored Databricks’ newer AI features, you’ve probably noticed that the documentation, while thorough, can feel circular and fragmented. You often need to jump between Databricks, MLflow, and OpenAI documentation to piece things together. It’s easy to lose the thread when trying to connect everything into a working system.\nThis post is my attempt to bridge those gaps with a concrete, end-to-end example — the kind I wish I’d had when I started. It’s a practical guide to getting tracing working with Mosaic AI Gateway without getting lost in a maze of configuration steps and scattered docs. To save you time, I’ll start by showing the solution up front, then walk you through the process that got me there — including the different methods I tried along the way.\nYou could argue that I should simply present the final setup and explain how it works. But I think it’s just as valuable to see what didn’t work. By sharing both the process and the result, I hope to give you confidence that this approach isn’t just functional, but tested, reasoned through, and grounded in actual experimentation.\nThe Solution: ResponsesAgent As promised, let’s start with the answer.\nThe simplest way to enable tracing while still using all the features of Mosaic AI Gateway is to create and deploy a ResponsesAgent model in Databricks. This model type has MLflow Tracing enabled by default, and when hosted through the Gateway, you retain the same production capabilities — including rate limiting, logging, guardrails, and more.\nIn short, a ResponsesAgent gives you the best of both worlds: full Gateway functionality and detailed trace data for every request.\nIf you’re here just for the implementation, you can skip to the end — I’ll walk through the setup step by step. But if you’re curious how I arrived at this solution, stick around. The next sections cover the other approaches I tried, the dead ends I hit, and how they led me to the ResponsesAgent path.\nAttempt 1: Foundational Models Like anyone learning a new system, I started at the beginning — the Mosaic AI Gateway Introduction page. It includes a table showing which features each model type supports:\nAt first glance, external model endpoints seemed the most capable. However, for this walkthrough, I focused on foundational models. They’re easier for readers to follow since they don’t require setting up authentication or external service access. Aside from that step, foundational and external models behave almost identically in configuration, serving behavior, and available Gateway features.\nAs a newcomer, I assumed I could host a foundational model and get tracing automatically — use a proven model and gain observability for free. That seemed like the ideal starting point, so my first goal was to spin up an endpoint and see how far I could get.\nFoundational Model Endpoint Creation When creating infrastructure in Databricks, there are usually multiple paths to the same result — Terraform, Python, SQL, or the UI. For investigative work like this, I prefer the UI. It makes it easy to explore configurations and verify behavior visually, even though in production you’d typically automate the process.\nTo create an endpoint, go to Serving → Create Serving Endpoint, then choose Foundational Models in the Served Entities section. This opens the endpoint creation menu shown below. Working through it from top to bottom, first give your endpoint a name, then configure the Served Entities section.\nClick Select an Entity, choose Foundational Models from the radio list, then click Select a foundational model in the box. You\u0026rsquo;ll see a new pop-up menu listing both foundational and external models.\nThis can be confusing at first because the pop-up menu is labeled Foundational Models, yet it also lists external providers. I’m calling this out for two reasons:\nSuppose you’d like to configure an external model instead. Start by selecting your provider and completing the authentication step shown above. Then finish creating your serving endpoint, taking note of the name you assign it. You’ll need that endpoint name later when configuring your ResponsesAgent to call this endpoint, which in turn routes to your external model. It shows that the only real difference between foundational and external models is authentication; the rest of the setup is identical. Once you’ve chosen a foundational model — in this case, I selected GPT OSS 20B for demo purposes — you’ll see the configuration screen below.\nHere you can configure throughput and scaling options, but there’s no tracing toggle.\nNote: When I first started, I saw some models with a tracing toggle in the UI, but those have since disappeared. Databricks evolves quickly, and feature changes often land mid-project. When I began this post, I expected to ask, “What if your model doesn’t support tracing?” — now, none of them do. Fortunately, I still have an answer.\nSearching for the Missing Piece Not knowing how to proceed, I dug into the documentation. There was plenty about tracing GenAI apps — but little on how to create an endpoint that automatically generates traces.\nA few helpful but incomplete resources included:\n\u0026ldquo;Get started: MLflow Tracing for GenAI (Databricks Notebook)\u0026rdquo; \u0026ndash; great for learning how traces work, but only covers tracing single notebook requests. \u0026ldquo;Tracing OpenAI\u0026rdquo; — shows how to trace OpenAI calls, but not for endpoint deployment. As you\u0026rsquo;ll find if you start to go through the docs as well, most examples show how to trace one request, not how to create an endpoint creates a trace for each request it recieves. Eventually, I found \u0026ldquo;Deploy agents with tracing\u0026rdquo;, which pointed me in the right direction \u0026ndash; though I was skeptical at first. My initial reaction was: “Why do we need an agent? This seems like such a simple thing to achieve — an agent feels overcomplicated.”\nBut that article sparked an idea: what if I created a wrapper model that calls the underlying model while automatically handling tracing? That realization shaped my next experiment.\nAttempt 2: Custom Python Model If foundational models couldn’t generate traces directly, then I needed something that could. The answer was to build a wrapper model — a lightweight layer that accepts requests, forwards them to the underlying model (like GPT OSS 20B), and returns the response unchanged. The difference is that the wrapper can be configured to add tracing to each request by default.\nHere\u0026rsquo;s the high level plan:\nBuild a small model class that wraps around our foundational model. Configure the class so that tracing is enabled by default. Register this model in Unity Catalog. Deploy it as a Serving Endpoint, just like before — except now the endpoint will support both AI Gateway and tracing. This approach gives you the same Gateway functionality as before, but with complete trace coverage. If this sounds confusing, hopefully the code examples will help make things concrete.\nWrapper Options Once I knew I needed a wrapper, the next question was how to define it with MLflow. There are two main options:\nCustom Python Model – Define your own the PythonModel class and implement your own prediction functions. Responses Agent Model – Use the ResponsesAgent class to create a agent model that calls your foundational model under the hood. As I mentioned before, I was skeptical of the ResponsesAgent approach. My goal wasn’t to build a full agent-based system — I just wanted to trace model calls. That made the Custom Python Model path seem like the most straightforward solution.\nThat said, the Gen AI Apps guide clearly recommends using response agents over custom python models. However, I still wasn\u0026rsquo;t convinced. I wanted somthing simple, transparent, and easy to debug.\nSo I built the Python model — and, as you can probably guess, it worked, but not as well as I’d hoped. Once it was running, I compared it to a ResponsesAgent implementation and found that the agent approach was cleaner, better aligned with Databricks’ newer OpenAI Responses API, and more future-proof as the platform continues to evolve.\nImplementing a Custom Python Model Creating a custom Python model in MLflow involves encapsulating your logic in a class that inherits from mlflow.pyfunc.PythonModel. The key method is predict, which receives input and returns the model’s response. Since this model acts only as a wrapper, our predict method simply forwards each request to the underlying foundational model and returns its response.\nIf you’d like to dig deeper, these are the main references I used:\nMLflow Python Model Guide Custom Serving Applications MLflow Python Model Class 1. Install dependencies\nIn the first notebook cell, install the following libraries using the code below:\n%pip install -U -qqqq databricks-openai dbutils.library.restartPython() In addition to installing the databricks-openai package, this command upgrades MLflow — which is important because the current default serverless environment typically includes MLflow Skinny 2.x, but the code below requires MLflow 3.x.\nDefault Libraries Installed Libraries mlflow-skinny==2.21.3 mlflow==3.4.0 databricks-connect==16.4.2 mlflow-skinny==3.4.0 databricks-sdk==0.49.0 mlflow-tracing==3.4.0 databricks-ai-bridge==0.8.0 databricks-connect==16.4.2 databricks-openai==0.6.1 databricks-sdk==0.49.0 databricks_vectorsearch==0.59 ⚠️ Note: MLflow’s documentation warns against installing both mlflow and mlflow-skinny. I haven’t encountered any issues, and several Databricks examples use the same approach — but it’s worth keeping in mind if anything behaves unexpectedly.\n2. Define your model\nIn cell 2 of our notebook, we define our model and save it to model.py. Let’s walk through the code from top to bottom to understand what each part does and why it matters.\n%%writefile model.py import mlflow from mlflow.pyfunc import PythonModel, PythonModelContext from databricks.sdk import WorkspaceClient from typing import Any, Dict, List, Optional class ModelWrapper(PythonModel): def __init__(self): self.client = WorkspaceClient().serving_endpoints.get_open_ai_client() def predict( self, context: PythonModelContext, model_input: List[Dict[str, str]], params: Optional[Dict[str, Any]] = None, ) -\u0026gt; List[str]: results = [] response = self.client.chat.completions.create( model=\u0026#34;databricks-meta-llama-3-1-8b-instruct\u0026#34;, messages=model_input ) results.append(response.choices[0].message.content) return results mlflow.openai.autolog() mlflow.set_tracking_uri(\u0026#34;databricks\u0026#34;) mlflow.set_experiment(\u0026#34;/Shared/mn-demo-experiments\u0026#34;) mlflow.models.set_model(ModelWrapper()) The %%writefile command writes this cell’s contents to the model.py file. This is necessary because the registration step later on will need to read your model from disk. You could, of course, create this file manually and omit this cell entirely, but writing it dynamically keeps the notebook self-contained and repeatable. Aside from a small requirements.txt file, this approach ensures everything you need to reproduce the setup lives in one place.\nThe %%writefile command writes this cell’s contents to the model.py file. This is required because the model registration step needs to read in the model from a .py file. We could have placed this code in the file manually and ommited this cell from the notebook. However, the %%writefile command allows us to keep all the code self-contained within a single notebook, aside from a small requirements.txt file.\nThe ModelWrapper class inherits from PythonModel, the standard interface for custom MLflow models. Inside the constructor, we initialize a WorkspaceClient, which gives us access to the serving endpoint client that will call our base model. That means our wrapper model can seamlessly forward requests to any foundation model or custom endpoint you’ve already deployed.\nAt this point, if you’d like to connect to an external model instead of a foundational one, follow these steps below:\nFollow the steps in Attempt 1 to create a serving endpoint for your external model (e.g., external-model-endpoint). Replace the model parameter in the chat.completions.create() call with the name of your external model. The next portion of the file is the predict method, which defines the inference logic — sending the request to the model and returning its response. You’ll notice that I added type hints to this function. In particular, MLflow will emit a UserWarning if the model_input parameter does not have a type hint applied. Some of the online examples I found only added type hints to the model_input parameter to silence the warning. Personally, I think if you are going to add type hints, you should be concsistent and add them everywhere. This approach prevents the UserWarning and aligns the code with Python best practices.\nFinally, look closely at the last four lines — they’re easy to overlook but absolutely essential:\nmlflow.openai.autolog() mlflow.set_tracking_uri(\u0026#34;databricks\u0026#34;) mlflow.set_experiment(\u0026#34;/Shared/mn-demo-experiments\u0026#34;) mlflow.models.set_model(ModelWrapper()) These lines enable tracing and logging.\nmlflow.openai.autolog() enables detailed trace collection. Without it, you’d only get partial trace data through manually placed decorators. set_tracking_uri() and set_experiment() specify where to store traces Databricks. If you skip this step, traces will only appear when you call the endpoint interactively from a Databricks notebook — not when hitting it via API. set_model() sets the model object that is going to be logged. 3. Restart the Python Library\nThis next step might seem odd, but it’s crucial. Right after creating the model.py file, restart the Python library using dbutils:\ndbutils.library.restartPython() If you skip this step, you’ll likely run into an import error the first time you reference model.py. The reason is subtle: when your compute session starts, Databricks appears to take a snapshot of your working directory. At that point, model.py doesn’t exist yet — so even after you write it, the environment doesn’t see it until you restart the interpreter. Restarting refreshes the session state so the new file becomes visible.\nThis same issue also applies if you modify model.py later. Suppose you rerun the %%writefile cell to overwrite the file with new code — unless you restart the Python library again, Databricks will continue using the old, cached version. It’s an easy mistake to make, but if you notice that your updates aren’t showing up, this is probably why.\n4. Register the model\nOnce your model.py file is defined, the final step is to register it in Unity Catalog.\nimport mlflow from mlflow.models.resources import DatabricksServingEndpoint import model example = [ {\u0026#34;role\u0026#34;: \u0026#34;system\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;You are a helpful assistant.\u0026#34;}, {\u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;What is the fibonacci sequence\u0026#34;}, ] with mlflow.start_run(): mlflow.pyfunc.log_model( name=\u0026#34;mn-ai-demo\u0026#34;, python_model=\u0026#34;model.py\u0026#34;, input_example=example, registered_model_name=\u0026#34;workspace.default.mn-ai-demo\u0026#34;, pip_requirements=[\u0026#34;databricks-openai\u0026#34;], resources=[DatabricksServingEndpoint(endpoint_name=\u0026#34;databricks-gpt-oss-20b\u0026#34;)], ) Since the previous %%writefile cell only wrote your model code to disk rather than executing it, you’ll need to re-import MLflow (and any dependencies) here. More importantly, notice the import model statement — this is a critical step. When Python imports the model module, it executes the last four lines we added earlier (autolog, set_tracking_uri, set_experiment, and set_model). This ensures that your experiment setup runs before mlflow.start_run() is called.\nIf you skip the import, MLflow will create two separate “Experiments”: one in your /Shared directory (as intended) and another automatically tied to your notebook. Only one of them will contain trace data, which makes debugging and cleanup a headache. Running import model keeps everything in sync and ensures that both your experiment metadata and your traces land in the right place.\nYou might be wondering why those four setup lines live inside the model.py file instead of the registration cell. I wondered the same thing and tried refactoring the code so the setup happened before the start_run() call. Surprisingly, the tracing functionality didn\u0026rsquo;t work correctly anymore. It seems that MLflow requires those configuration calls to live inside the Python file that defines the model in order to properly associate the tracing context with the model object.\nIf you’ve seen Databricks examples that don’t include this import model step, that’s usually because they test the model in an earlier cell by calling its predict() method directly. Those tests implicitly execute the four setup lines, so the import isn’t needed later. However, if you skip the test cell and go straight to registration, you must import the module explicitly — otherwise, you’ll again end up with two experiments and inconsistent logging. It’s a small but important detail that saves a lot of confusion down the line.\nFinally, the example variable defines a simple input that MLflow uses to validate your model during registration.\nWhat to Expect When You Run Model Registration Code\nWhen you execute the registration cell, MLflow will confirm that your run completed successfully and that a new model version has been created. During this process, you’ll also see a short message that says something like “Running the predict function to generate output based on input example.” This step validates that your model can execute end-to-end without errors by running a quick inference using the example input you defined earlier.\nIn most runs, you’ll also see the model’s output (from the LLM) appear directly in the notebook output area. When I re-ran the notebook to capture the screenshot above, however, the output didn’t appear — so don’t panic if the same thing happens to you. I have found the tracing during the model registration can be inconsistent. If you re-run the cell later, you\u0026rsquo;ll probably see the trace of the input example without any changes to the code.\nEven if the model’s output doesn’t display inline, you can still confirm that the trace was generated successfully. Open the Experiments page in Databricks, and you should see a new experiment created under the location you specified in your model setup — in my case, /Shared/mn-demo-experiments, since that’s the path I set in the mlflow.set_experiment() call inside model.py.\nI’ve added a short demo below showing how that looks in practice:\nYour browser does not support the video tag. As you can see in the video, the resulting trace contains much more than just the input prompt and model response — it includes structured metadata about the request, timestamps, token usage, model configuration, and more. These details are what make MLflow Tracing so valuable when debugging or tuning model behavior.\nOnce your model is registered, you can also interact with it directly from any Databricks notebook without re-importing the model.py file. Simply load it from Unity Catalog using mlflow.pyfunc.load_model() and call predict() with your desired input. Because tracing is baked into the model itself (via the autolog() configuration in model.py), each inference you run from a notebook will automatically produce a new trace entry — like the example shown below.\nCreating the Endpoint With your model now registered in Unity Catalog, the next step is to deploy it as a serving endpoint.\nFrom the Databricks workspace, navigate to the Serving page and click Create Endpoint. Select your newly registered Python model from the list — you should see that there\u0026rsquo;s now an option to enable tracing. Make sure this setting is turned on if it isn\u0026rsquo;t already.\nScroll down to the AI Gateway section to configure additional settings like the Inference Table, which records all requests and responses. This table is useful for auditing and performance tracking, though it doesn’t include the same level of detail as MLflow Traces. (Keep in mind that inference tables aren’t available on the free Databricks tier.)\nOnce you’ve configured your settings, click Create and wait for your model’s serving endpoint to finish deploying. When the status shows as Active, the endpoint is live and ready to accept REST API calls.\nYou can now test it using curl or your preferred REST client — I’ve been using the REST Client extension in VS Code. After sending a few requests, check your Experiments page under the shared experiment path — you’ll see fresh traces appear there. Here\u0026rsquo;s a short demo showing how to send a request to the endpoint and then see the associated trace:\nAt this point, you’ve successfully built an endpoint with full Mosaic AI Gateway functionality and detailed tracing — all through a custom Python model. You\u0026rsquo;re probably wondering why I am not recommending the python model. The issue is that I had a difficult time setting up streaming responses with the custom python model. If streaming had worked seamlessly, this might have been my final recommendation. But it didn’t — and that’s what led me to explore the ResponsesAgent next.\nWhat Went Wrong with Streaming Requests If you’ve looked at the documentation I referenced earlier, you may have noticed that the PythonModel class in MLflow also defines a predict_stream function that you can override to support streaming requests.\nHere’s the basic idea: we implement the predict_stream function inside our model class. When a REST request includes a streaming parameter, MLflow will call predict_stream instead of predict, allowing the model to return partial results as they arrive.\nHowever, this is where things start to get tricky. The predict_stream function is designed to take the same PyFunc-compatible input as predict, so I defined it as follows:\ndef predict_stream( # pyright: ignore self, context: PythonModelContext, model_input: List[Dict[str, str]], params: Optional[Dict[str, Any]] = None, ) -\u0026gt; Iterator[str]: response = self.client.chat.completions.create( model=\u0026#34;databricks-meta-llama-3-1-8b-instruct\u0026#34;, messages=model_input, stream=True, ) full_message = \u0026#34;\u0026#34; for chunk in response: if chunk.choices and chunk.choices[0].delta.content: new_content = chunk.choices[0].delta.content full_message += new_content yield new_content yield full_message Testing in a Notebook\nWhen I imported the module directly and invoked predict_stream, it worked perfectly — chunked responses arrived in real time, and the trace appeared in the notebook output.\nThis confirmed that the function worked when called directly from the notebook. I could see all the chunks streaming back one by one, and tracing behaved exactly as expected.\nEncouraged by this, I decided to test the same functionality through other methods — and that’s where things started to fall apart.\nTesting Through the Loaded Model and REST API\nAfter registering the model in Unity Catalog, I tried invoking it again by loading it with mlflow.pyfunc.load_model() and calling predict_stream. This time, it failed.\nYou can see in the image above that predict() still works fine when the model is loaded this way — but predict_stream() doesn’t. The same issue appears when invoking it through a REST endpoint:\nAt this point, I was puzzled. The function clearly worked in one context but failed in another. I briefly considered adding a streaming flag to the predict method itself (e.g., predict(streaming=True)), but that felt like a hack and went against the intended design of the MLflow API. It also wasn’t as clean as maintaining two clearly defined methods — one for standard predictions and one for streaming.\nSo I started digging into the root cause.\nDigging into the Cause\nWhy didn’t predict_stream work when the model was loaded from Unity Catalog?\nThe key detial lies in what mlflow.pyfunc.load_model() actually returns. According to the MLflow docs, it doesn’t return your PythonModel directly — it returns a PyFuncModel, a wrapper class that standardizes how models are called.\nWhen you invoke predict_stream() on the loaded model, you’re actually calling the wrapper’s version of that function, which then delegates to your implementation. Unfortunately, something in that handoff — specifically in how inputs are validated and passed through — seems incompatible with the OpenAI-style message list I was using.\nFor anyone interested in exploring further, you can inspect the predict_stream implementation in the PyFuncModel source code.\nWhat frustrated me about this experience is that MLFlow PythonModel documentation states that both predict and predict_stream accept PyFunc-compatible input. Since my input worked perfectly with predict, I expected it to work with predict_stream as well.\nThe Inference API docs also claim that “a list of any type” should be valid input — further suggesting this should have worked.\nWhere Things Stand\nTo make predict_stream work, I had two main options:\n(1) change its input format, or (2) modify predict so it could handle streaming requests as well.\nBoth felt like poor tradeoffs. I didn’t want to maintain separate input schemas for predict and predict_stream, and I also didn’t like the idea of adding a “streaming” flag to predict just to make it behave differently.\nIf you don’t need streaming, the custom Python model approach is still an excellent choice — it’s flexible, powerful, and integrates seamlessly with Databricks. But for my use case — supporting both standard and streaming completions — it wasn’t enough.\nSo it was time to move on to Attempt 3: the ResponsesAgent.\nAttempt 3: Responses Agent The Databricks documentation includes a “simple” guide for creating a Responses Agent endpoint. It’s a good starting point, but I’ll admit — I wasn’t a huge fan of the sample notebook. The call stack for basic predictions felt unnecessarily complex, and several unused libraries made it harder to see what was actually going on. At one point, I even caught myself wondering if those extra dependencies had some hidden purpose I’d missed.\nThat said, it’s still a valuable reference. I adapted their example into a cleaner, more minimal version that’s easier to follow for anyone new to ResponsesAgent. That’s the version we’ll walk through here.\nFor anyone curious, you can find Databricks’ original example notebook here: https://docs.databricks.com/aws/en/notebooks/source/mlflow3/simple-agent-mlflow3.html.\nImplementing Responses Agent As before, we’ll start our notebook with an installation cell — but this time we’ll add the databricks-agents library alongside databricks-openai.\n%pip install -U -qqqq databricks-openai databricks-agents dbutils.library.restartPython() Next, we’ll define our agent and write it to a Python file:\n%%writefile model.py import mlflow from mlflow.pyfunc import ResponsesAgent from mlflow.types.responses import ( ResponsesAgentRequest, ResponsesAgentResponse, ResponsesAgentStreamEvent, ) from databricks.sdk import WorkspaceClient from typing import Generator class SimpleResponsesAgent(ResponsesAgent): def __init__(self): self.workspace_client = WorkspaceClient() self.client = self.workspace_client.serving_endpoints.get_open_ai_client() self.model = \u0026#34;databricks-gpt-oss-20b\u0026#34; def predict(self, request: ResponsesAgentRequest) -\u0026gt; ResponsesAgentResponse: messages = request.input response = self.client.chat.completions.create( model=self.model, messages=self.prep_msgs_for_cc_llm(messages), ) return ResponsesAgentResponse( output=[ self.create_text_output_item( text=response.choices[0].message.content, id=response.id ) ], ) def predict_stream( self, request: ResponsesAgentRequest ) -\u0026gt; Generator[ResponsesAgentStreamEvent, None, None]: response = self.client.chat.completions.create( model=self.model, messages=self.prep_msgs_for_cc_llm(request.input), stream=True, ) item_id = 1 full_message = \u0026#34;\u0026#34; for chunk in response: if chunk.choices and chunk.choices[0].delta.content: new_content = chunk.choices[0].delta.content full_message += new_content yield ResponsesAgentStreamEvent( **self.create_text_delta( delta=new_content, item_id=f\u0026#34;msg_{item_id}\u0026#34; ), ) item_id += 1 yield ResponsesAgentStreamEvent( type=\u0026#34;response.output_item.done\u0026#34;, item=self.create_text_output_item( # pyright:ignore text=full_message, id=f\u0026#34;msg_{item_id-1}\u0026#34;, ), ) return mlflow.openai.autolog() mlflow.set_tracking_uri(\u0026#34;databricks\u0026#34;) mlflow.set_experiment(\u0026#34;/Shared/mn-demo-experiments-agent\u0026#34;) mlflow.models.set_model(SimpleResponsesAgent()) Understanding the predict Function\nAt first glance, this looks similar to our earlier custom Python model — but there are three key differences:\nInheritance: our class now inherits from ResponsesAgent instead of PythonModel.\nTypes: the predict method takes a single parameter of type ResponsesAgentRequest and returns a ResponsesAgentResponse.\nTranslation: Before sending messages to the model, it calls self.prep_msgs_for_cc_llm() — a helper function that quietly handles a lot of complexity.\nIn order to understand these differences and fully understand the code, we have to start at the request and response structures in place.\nRequest and Response Structure\nHere\u0026rsquo;s a simplified example from the MLflow Responses Agent docs.\n# Example Request schema { \u0026#34;input\u0026#34;: [ { \u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;What is the weather like in Boston today?\u0026#34;, } ], \u0026#34;tools\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;get_current_weather\u0026#34;, \u0026#34;parameters\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;object\u0026#34;, \u0026#34;properties\u0026#34;: {\u0026#34;location\u0026#34;: {\u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;}}, \u0026#34;required\u0026#34;: [\u0026#34;location\u0026#34;, \u0026#34;unit\u0026#34;], }, } ], } # Example Response schema { \u0026#34;output\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;message\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;some-id\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;completed\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;assistant\u0026#34;, \u0026#34;content\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;output_text\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;rainy\u0026#34;, } ], } ], } These schemas define how ResponsesAgentRequest and ResponsesAgentResponse are structured. Note that both can include additional parameters (like temperature or max_output_tokens), so it’s worth checking the full API reference for details.\nThe Role of prep_msgs_for_cc_llm()\nOpenAI recently introduced a new Responses API, which replaces the older Chat Completions API used in many legacy examples. Databricks’ ResponsesAgent class and its request/response types are built to align with this newer API.\nHowever — and this is where things get tricky — the two APIs expect slightly different input formats.\nThe Chat Completions API expects a list of messages. The Responses API can accept a single string or a structured schema. This means that a request formatted for the Responses API won’t necessarily work with the Chat Completions API.\nThat’s where prep_msgs_for_cc_llm() (short for prepare messages for chat completion LLM) comes in — it automatically converts the input into the correct structure. You don’t have to define it yourself; it’s inherited from the ResponsesAgent base class.\nWhy Not Use the Responses API Directly?\nYou might wonder: if our input already matches the Responses schema, why not just call the Responses API?\nSomething like this should work, right?\nmessages = request.input response = client.responses.create( model=self.model, messages=messages, ) In theory, yes — but in practice, not yet within Databricks.\nHere’s why: the WorkspaceClient from the Databricks SDK provides a wrapped client that can access registered models inside your workspace, regardless of where they’re hosted. It’s convenient because you don’t need to configure environment variables for authentication.\nMy guess is that his SDK client hasn’t been fully updated to support the new Responses API. As a result, calling client.responses.create() currently raises an error — even with simple requests.\nThis theory is further supported by the official Databricks notebooks: all of them use the ResponsesAgent class (which matches the Responses API schema) but still call the Chat Completions API using the prep_msgs_for_cc_llm function behind the scenes.\nA Note on Alternative Clients\nThere is another way to call the Responses API in Databricks — by using the standard OpenAI client instead of the SDK:\nfrom openai import OpenAI client = OpenAI() This approach works when calling external models that support the Responses API (note that some older models don’t). However, it requires you to set environment variables for authentication.\nWrapping Up predict\nAfter the messages are translated, the model is called as usual. The final step is returning a response that matches the ResponsesAgentResponse schema:\nreturn ResponsesAgentResponse( output=[ self.create_text_output_item( text=response.choices[0].message.content, id=\u0026#34;msg_1\u0026#34; ) ], ) Since the ResponsesAgent is designed for the Responses API (while our response object follows the Chat Completions schema), this constructor bridges the two formats. The helper function create_text_output_item() creates a properly structured output entry — one of several output types available. You can find the full list in the Creating Agent Output section of the ResponsesAgent documentation.\nAlso don’t worry about losing details from the original response. Although we only return the message text, MLflow’s tracing automatically captures the full request and response context — including all the metadata — behind the scenes.\nWhat About Streaming?\nStreaming worked much more smoothly with ResponsesAgent than it did with the custom Python model.\nHere’s what’s happening in the code:\nThe call to the model includes the stream=True parameter, which signals that we want token-by-token output. The response arrives in chunks. The code accumulates these chunks into a single message. As new chunks arrive, we yield incremental ResponsesAgentStreamEvent objects so the user can see updates in real time. Finally, we yield a “done” event to signal that the response is complete. This design allows your application to display streaming responses without blocking — and since it’s built into the ResponsesAgent framework, the setup is minimal.\nLogging and Deployment\nThere are two additional notebook cells to complete the setup:\n# cell 1 import mlflow from mlflow.models.resources import DatabricksServingEndpoint UC_LOCATION = f\u0026#34;workspace.default.agent-demo-endpoint\u0026#34; mlflow.openai.autolog() with mlflow.start_run(): logged_agent_info = mlflow.pyfunc.log_model( name=\u0026#34;agent-demo-endpoint\u0026#34;, python_model=\u0026#34;agent_model_streaming.py\u0026#34;, registered_model_name=UC_LOCATION, pip_requirements=\u0026#34;requirements.txt\u0026#34;, resources=[DatabricksServingEndpoint(endpoint_name=\u0026#34;databricks-gpt-oss-20b\u0026#34;)], ) # COMMAND ---------- from databricks import agents # pyright: ignore agents.deploy( UC_LOCATION, model_version=logged_agent_info.registered_model_version, ) The first cell logs the model — something you’ve seen earlier in this series.\nThe second cell deploys the agent directly from code, so you don’t need to use the Databricks Serving UI manually.\nIf the model is already deployed, it will automatically apply updates — a small but very welcome time-saver.\nConclusion It was a long journey to arrive at the Responses Agent approach — but hopefully one that made the reasoning clear.\nIf you’ve followed along from the beginning, you can see how a newcomer might start with foundational models, explore custom Python models, and eventually land on Responses Agents as the most robust and traceable option.\nIf you take away just a few things, let them be these:\nYou now understand how Mosaic AI Gateway, model serving, Python models, and Responses Agents fit together. If you’re building something similar, you can confidently start with Responses Agents, knowing that the alternatives were explored and tested. Thanks for reading — and for sticking with a deep-dive post!\nI wanted to make this guide as thorough as possible so it answers the questions I had when I first started.\nIf you enjoyed this, stay tuned for more articles on data engineering, AI, and Databricks.\n","permalink":"http://localhost:1313/posts/ai-gateway/","summary":"\u003cp\u003eMosaic AI Gateway is Databricks’ system for managing and governing how your organization uses large language models (LLMs) and AI agents. Out of the box, it includes features like permission and rate limiting, payload logging, usage tracking, AI guardrails, fallbacks, and traffic splitting. These tools give teams tighter control over their AI workloads — making it easier to manage access, monitor performance, and keep costs in check.\u003c/p\u003e\n\u003cp\u003eAlthough Mosaic AI Gateway comes with many powerful features, one capability is still missing: MLflow Tracing. Tracing is like logging with context — it doesn’t just capture the request and response, but also the intermediate steps that reveal what happened inside your AI system when something goes wrong. Without it, visibility into model behavior can be limited. As you’ll see, MLflow traces can be an invaluable tool when debugging or optimizing an LLM workflow.\u003c/p\u003e","title":"Tracing with Databricks Mosaic AI Gateway: A Practical Guide"},{"content":"Disclaimer: This presentation was originally created when the technology was called Delta Live Tables (DLT). Databricks has since rebranded it as Lakeflow Declarative Pipelines. While the name has changed, many of the strategies and techniques for applying data quality rules remain the same. For the latest documentation, see the Databricks Lakeflow Declarative Pipelines docs.\nEnsuring high data quality is critical for analytics, decision-making, and building reliable AI/ML models. Without it, organizations risk costly errors, unreliable insights, and ineffective models.\nIn this talk, I share a practical guide to implementing data quality expectations within Databricks’ Delta Live Tables (DLT). Think of expectations as “unit tests for data” — rules that define what your data should look like. By applying them, you can:\nMeasure the proportion of data that meets quality standards Quarantine or block bad data before it flows downstream Detect bugs in code that cause quality issues Lay the foundation for data quality monitoring and reporting The session walks through a four-step process for writing expectations: profiling your data, collaborating with domain experts, documenting rules, and translating them into SQL. I also share lessons learned, tips for managing quarantines, and strategies to balance strict vs. loose expectations.\n📺 Watch the full presentation on YouTube https://www.youtube.com/watch?v=Uk3kN97NgPk\u0026amp;t=2s\n📑 Download the slides and demo code on GitHub https://github.com/mnorberg-dev/data-expectations\nWhether you’re a developer working hands-on with DLT pipelines or simply looking to understand how to raise the bar on your organization’s data quality, this talk will give you actionable tools to get started.\n","permalink":"http://localhost:1313/posts/data-quality-expectations/","summary":"\u003cp\u003e\u003cstrong\u003eDisclaimer:\u003c/strong\u003e This presentation was originally created when the technology was called \u003cstrong\u003eDelta Live Tables (DLT)\u003c/strong\u003e. Databricks has since rebranded it as \u003cstrong\u003eLakeflow Declarative Pipelines\u003c/strong\u003e. While the name has changed, many of the strategies and techniques for applying data quality rules remain the same. For the latest documentation, see the \u003ca href=\"https://docs.databricks.com/aws/en/dlt/\"\u003eDatabricks Lakeflow Declarative Pipelines docs\u003c/a\u003e.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eEnsuring high data quality is critical for analytics, decision-making, and building reliable AI/ML models. Without it, organizations risk costly errors, unreliable insights, and ineffective models.\u003c/p\u003e","title":"Databricks Data Quality Expectations Guide"},{"content":"Databricks is quickly becoming one of the most popular data lakehouse platforms out there. Its popularity is growing fast, and for many developers, a significant portion of the job happens directly in the browser inside their Databricks workspace.\nYes, I know—there are popular extensions that let you develop code outside of Databricks. Many folks swear by the VS Code extension because they prefer working in their favorite editor. But at the end of the day, you’re still going to spend time in the browser making sure your code runs as expected.\n👉 If you’d rather skip ahead and get straight to the solution, I’ve published the script (with setup instructions) in this GitHub repo.\nThe Problem: Too Many Tabs, Too Few Clues Many organizations using Databricks have multiple workspaces to represent different environments—think dev, qa, and prod. Some even have additional splits like staging or sandbox.\nIf you’re working across all of them, here’s the problem: your browser tabs all look the same.\nNote: URLs in images are redacted, but in your environment, the redacted portions will appear as GUIDs.\nInside the workspace, the situation isn’t much better. It\u0026rsquo;s not easy to determine which environment you are in. Technically, each environment does identify itself in two places though:\nThe domain name. Every environment has a URL like adb-\u0026lt;long string of numbers\u0026gt;. But let’s be honest—nobody remembers arbitrary GUIDs. It’s the same reason DNS exists: humans prefer names like google.com instead of memorizing IP addresses. A small piece of text in the top-right corner. Sure, it’s there, but after seeing it hundreds of times, your brain starts ignoring it. It’s easy to miss, and if you’re juggling multiple tabs, you can’t even see that text without clicking into each one. The end result? Confusion, context-switching, and the very real risk of running a query in prod that you meant for dev.\nBut Wait, Isn’t There a Color Trick? Some people solve this by assigning different themes—say, dark mode for prod and light mode for dev. Clever idea, but it falls apart quickly:\nThere are only two color schemes available and many organizations have three workspaces meaning one environment will inevitably match another. If two or more environments share a metastore, changing one changes the other. And let’s be honest: some developers simply refuse to use a theme they don’t like. So while the color trick can work in a pinch, it’s not a real solution.\nTo activate dark mode, navigate to Settings → User Preferences → “Prefer Dark.”\nIf you don’t enable this setting, your environment theme will default to match the light theme shown in the images above.\nThe Solution: Tampermonkey to the Rescue Enter Tampermonkey, a browser extension that lets you run custom JavaScript whenever you visit a matching URL.\nWith a short script, you can automatically label your Databricks browser tabs with an emoji + text identifier for each environment. Suddenly, dev, qa, and prod are crystal clear.\nIt’s simple, lightweight, and makes a huge difference:\nFaster navigation between environments Reduced risk of editing the wrong workspace A quality-of-life boost you’ll wonder how you lived without And best of all: little to no performance impact. I’ve been running this script for weeks, and my browser hasn’t skipped a beat. Below, I\u0026rsquo;ve provided an image illustrating what your dev environment will look like after setting up the Tamper Monkey script for yourself.\nHow to Set It Up Getting your Databricks tabs labeled automatically is quick and easy. You’ll need to:\nInstall Tampermonkey Create a new script Paste in the code Configure your environment domains Save and enable the script Enable user scripts in your browser (Chrome only) Verify it’s working Note: These instructions are written for Google Chrome, but the steps can be adapted to other browsers that support Tampermonkey.\nFollow the steps below.\n1. Install Tampermonkey Download Tampermonkey for your browser from tampermonkey.net. Restart your browser after installation. 2. Create a New Script Open the Tampermonkey extension → Dashboard → “Create a new script.” Delete the boilerplate code so the editor is blank. 3. Add the Script Copy and paste the following code into the new script:\n// ==UserScript== // @name Databricks Tab Emoji Label // @namespace http://tampermonkey.net/ // @version 1.5 // @description Add emoji and label to Databricks tab title based on environment // @author Matthew Norberg // @match https://\u0026lt;your-domain-here\u0026gt;.azuredatabricks.net/* // @grant none // ==/UserScript== (function() { \u0026#39;use strict\u0026#39;; function updateTitle() { const url = window.location.href; let label = \u0026#39;\u0026#39;; let emoji = \u0026#39;\u0026#39;; // Define your environment domains here let devDomain = \u0026#39;\u0026#39;; let qaDomain = \u0026#39;\u0026#39;; let prodDomain = \u0026#39;\u0026#39;; if (url.includes(devDomain)) { label = \u0026#39;DEV\u0026#39;; emoji = \u0026#39;🟢\u0026#39;; } else if (url.includes(qaDomain)) { label = \u0026#39;QA\u0026#39;; emoji = \u0026#39;🟡\u0026#39;; } else if (url.includes(prodDomain)) { label = \u0026#39;PROD\u0026#39;; emoji = \u0026#39;🔴\u0026#39;; } else { label = \u0026#39;OTHER\u0026#39;; emoji = \u0026#39;⚪\u0026#39;; } if (!document.title.startsWith(`[${emoji} ${label}]`)) { document.title = `[${emoji} ${label}] ${document.title}`; } } // Initial run setTimeout(updateTitle, 3000); // Monitor for URL changes in SPA let lastUrl = location.href; new MutationObserver(() =\u0026gt; { const currentUrl = location.href; if (currentUrl !== lastUrl) { lastUrl = currentUrl; setTimeout(updateTitle, 2000); } }).observe(document, {subtree: true, childList: true}); })(); 4. Configure Environment Domains Near the top of the script, replace the placeholders with your actual environment domains:\nlet devDomain = \u0026#39;your-dev-domain\u0026#39;; let qaDomain = \u0026#39;your-qa-domain\u0026#39;; let prodDomain = \u0026#39;your-prod-domain\u0026#39;; 5. Save and Enable the Script Save your changes (File → Save).\nMake sure the script toggle in Tampermonkey is turned on (green).\n6. Enable User Scripts in Chrome Go to chrome://extensions → find Tampermonkey → click Details.\nMake sure Allow user scripts is enabled.\nNote: Other browsers may have different settings for allowing user scripts—adapt accordingly.\n7. Verify installation Open your Databricks environment in a new tab.\nAfter a few seconds, your tab title should display the correct emoji + environment label.\nTroubleshooting Tab title doesn’t update right away\nThe script intentionally waits 3 seconds after page load before applying changes.\nWithout this delay, the title gets updated but is overwritten during the web page loading process.\nIn testing, 3 seconds worked well, but you can adjust this by editing the setTimeout call in the code:\nsetTimeout(updateTitle, 3000); Still not working?\nDouble-check that:\nThe script is enabled in Tampermonkey. Your domains are correctly set in both the variables and the @match lines. “Allow user scripts” is enabled in your browser’s extension settings. Final Thoughts It’s a small tweak, but it solves a surprisingly big problem. If you’re juggling multiple Databricks environments, this little script will save you from confusion—and maybe even prevent a mistake or two.\nSometimes the best tools aren’t the big, complicated ones. They’re the tiny hacks that make your day smoother.\n👉 You can grab the full script and step-by-step setup instructions in the databricks-tools-repo here.\n","permalink":"http://localhost:1313/posts/databricks-tab-label-tool/","summary":"\u003cp\u003eDatabricks is quickly becoming one of the most popular data lakehouse platforms out there. Its popularity is growing fast, and for many developers, a significant portion of the job happens directly in the browser inside their Databricks workspace.\u003c/p\u003e\n\u003cp\u003eYes, I know—there are popular extensions that let you develop code outside of Databricks. Many folks swear by the VS Code extension because they prefer working in their favorite editor. But at the end of the day, you’re still going to spend time in the browser making sure your code runs as expected.\u003c/p\u003e","title":"The Databricks Tool You Didn't Know You Needed"},{"content":"Hi! I’m Matthew Norberg, a Data Engineer with a passion for turning complex data challenges into clean, maintainable, and high-performing solutions. Over the past several years, I’ve had the opportunity to work with Databricks, Azure, and a variety of modern data tools, building platforms, pipelines, and systems that help organizations make better use of their data.\nMy Journey in Data Engineering I’ve always had a passion for programming and problem-solving, which first led me down the path of software engineering during my undergraduate studies. In graduate school, I started working more with data, earning a degree in Computer Science with a concentration in Data Science. This combination of software engineering and data expertise naturally led me to data engineering—a perfect middle ground between building robust systems and working with meaningful data. My background in CS and data science has prepared me well to tackle the challenges of modern data engineering.\nMy approach to data engineering can be summed up in one simple philosophy: first make it work, then make it work better, a mindset I learned from my mentor, Rich Dudley. I thrive in environments where I can take a messy or incomplete problem and turn it into something reliable, scalable, and elegant.\nMy Projects \u0026amp; Work Highlights Platform Engineering \u0026amp; Architecture: Built and maintained Databricks environments in Azure using Terraform and Terragrunt. Configured Unity Catalogs, external locations, and volumes, and designed Dev, QA, and Prod environments. Contributed to cost optimization efforts in the Databricks Well-Architected Framework.\nData Pipelines \u0026amp; Medallion Architecture: Designed fault-tolerant pipelines that move data through the medallion architecture layers—bronze, silver, and gold—improving data quality at each step and preparing it for use by downstream teams. Pipelines were engineered to minimize manual steps, making workflows easy to deploy, manage, and maintain.\nSafeguarded Sensitive Procedures: Wrote code to handle sensitive processes mindfully, reducing the risk of mistakes. For example, I developed a WordPress ingestion client in Python with defensive safeguards to ensure proper usage.\nData Quality \u0026amp; Governance: Developed data quality checks and DLT pipelines using Data Expectations. Built dashboards to monitor data health, integrated governance tools like Atlan, and was selected as a Databricks Data \u0026amp; AI Summit speaker candidate, submitting a presentation on Data Expectations in Databricks.\nLarge Data Processing \u0026amp; Analytics: Tuned Spark pipelines and computed complex KPIs. Reverse-engineered Tally Street metrics—a tool used by accountants to extract KPIs from general ledgers—using Python and SQL to improve speed, accuracy, and accessibility.\nDemocratizing Data \u0026amp; AI: Built AI/BI Genies in Databricks, AI-driven tools that allow colleagues to ask questions about company data and generate dashboards, making AI and analytics accessible to non-technical users.\nSalesforce Knowledge Base Ingestion: Ingested Salesforce Knowledge Base articles—help desk pages—from Databricks using the Salesforce connector. Added this content to a vector index to power a search application, making it easier for customers to find support and internal teams to access knowledge.\nWordPress Website Ingestion: Created a Python connector from scratch to ingest the entire company WordPress site into Databricks. Implemented retry and backoff logic to handle API failures or network issues. Designed workflows to capture the full website on day 1, then only incremental changes on subsequent days—ensuring that temporary failures don’t require manual reruns and the system automatically catches up the next day.\nCI/CD \u0026amp; Automation: Configured service principals and created Azure DevOps CI/CD pipelines using Infrastructure as Code practices for reliable, repeatable deployments.\nDocumentation \u0026amp; Knowledge Sharing: Created Confluence documentation for all key processes, designed for future ingestion into a company-wide vector database to make knowledge accessible to other engineers.\nOutside the Data World When I’m not working with data, I like to stay active and explore the outdoors. Golfing and hiking are two of my favorite ways to recharge and stay focused, and I also love rock climbing, which keeps me on my toes—literally and figuratively!\nI’m also a huge pizza and coffee nerd:\nI’ve learned to make pizza dough from scratch, and true to my data-driven nature, I’ve kept a tally in 2025 of every pizza I’ve made. Nearly every morning, I make a pour-over coffee using my V60, my favorite coffee brewer. My go-to beans are typically light to medium roasts from George Howell Coffee. I also genuinely enjoy tinkering with personal coding projects, experimenting with new tools, and learning ways to make complex systems simpler and more efficient. And just like in my professional life, I love solving puzzles—whether it’s in code, a tricky climbing route, or perfecting a pizza crust!\nI’m always excited to connect with fellow data enthusiasts, share what I’ve learned, and continue growing as a data engineer. Thanks for stopping by my blog!\n","permalink":"http://localhost:1313/about/","summary":"\u003cp\u003eHi! I’m Matthew Norberg, a Data Engineer with a passion for turning complex data challenges into clean, maintainable, and high-performing solutions. Over the past several years, I’ve had the opportunity to work with Databricks, Azure, and a variety of modern data tools, building platforms, pipelines, and systems that help organizations make better use of their data.\u003c/p\u003e\n\u003ch2 id=\"my-journey-in-data-engineering\"\u003eMy Journey in Data Engineering\u003c/h2\u003e\n\u003cp\u003eI’ve always had a passion for programming and problem-solving, which first led me down the path of software engineering during my undergraduate studies. In graduate school, I started working more with data, earning a degree in Computer Science with a concentration in Data Science. This combination of software engineering and data expertise naturally led me to data engineering—a perfect middle ground between building robust systems and working with meaningful data. My background in CS and data science has prepared me well to tackle the challenges of modern data engineering.\u003c/p\u003e","title":"About Me"}]